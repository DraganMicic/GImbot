 //ovo je kod za line folow click
 // ukljuci gornji adc int na RA0 i uklju?i sviceve 1.1 i 2.1  i jumpere j3 i j4 stavi na USB UART

#include <built_in.h>
#include "VCNL40x0.h"
//char uart_rd;
unsigned char i_loop;       //promenljive za proksimiti
unsigned char Command;
unsigned int ProxiValue;
unsigned int AverageProxiValue;
unsigned int AmbiValue;
unsigned long int SummProxiValue;
unsigned char InterruptStatus;
unsigned char LoByte, HiByte;
char temp_text[7];


int U3R;    //sve sto treba za ocitavanje
int U3;
int U2R;
int U2;
int U1R;
int U1;
int U4R;
int U4;
int U5R;
int U5;

int cal; //za granicu belo crno

float cnt1;        //promenljive za tajmere
float cnt2;
float cnt3;

int a1;
int a2;
int c1;
int c2;

int ab;
int last;

int trept;

void interrupt() {              //<<<<<<<<<<<<<<<<<<<<<<<odve su definisane Interapt finkcije i njih nigde ne kopiras same se pozivaju
     if (TMR0IF_bit) {
        cnt1=cnt1+1;                 // increment counter
        cnt2=cnt2+1;                    // increment counter
        cnt3=cnt3+1;
                        // increment counter

        TMR0IF_bit = 0;        // clear TMR0IF
        TMR0L = 0;             // set TMR0 for aproximetly 1 sec
     }
}

void pwm1(int t1up, int t1down){
     if(cnt1<=t1up){LATB5_bit=1;}
     if(cnt1>=t1up&&cnt1<=t1up+t1down){LATB5_bit=0;}
     if(cnt1>=t1up+t1down){cnt1=0;}

}
void pwm2(int t2up, int t2down){
     if(cnt2<=t2up){LATB6_bit=1;}
     if(cnt2>=t2up&&cnt2<=t2up+t2down){LATB6_bit=0;}
     if(cnt2>=t2up+t2down){cnt2=0;}

}
void mod(int c) {            //paljenje lampica
     switch(c){
               case 4:  /*latD0_bit=1;*/   a1=2;a2=60;c1=18;c2=45;       break;        //44444444

               case 3: /* latD1_bit=1; */    a1=8;a2=50;c1=17;c2=30;       break;        //3333333333

               case 2: /*latD2_bit=1; */    a1=10;a2=50;c1=17;c2=30;       break;      //2222222222222

               case 1: /*latD3_bit=1; */    a1=12;a2=50;c1=17;c2=30;       break;     //11111111111111111

              case 0: /*latD4_bit=1;  */   a1=13;a2=45;c1=13;c2=45;       break;      //00000000000000000000000000

               case -1: /* latD5_bit=1; */   a1=17;a2=30;c1=12;c2=50;       break;      //1111111111111

               case -2: /*  latD6_bit=1; */   a1=17;a2=30;c1=10;c2=50;       break;        //222222222

               case -3: /*/ latD7_bit=1; */   a1=17;a2=30;c1=8;c2=50;       break;        //3333333333

               case -4: /* latE0_bit=1; */  a1=18;a2=45;c1=2;c2=60;       break;       //444444444444
     }
}

void ridd (){                  //cita vrednosti sa line folow clicka

     U5R = ADC_Read(4);
     U4R = ADC_Read(3);
     U3R = ADC_Read(2);
     U2R = ADC_Read(1);
     U1R = ADC_Read(0);

     if (U1R > cal){U1 = 1;}
     if (U1R < cal){U1 = 0;}

     if (U2R > cal){U2 = 1;}
     if (U2R < cal){U2 = 0;}

     if (U3R > cal){U3 = 1;}
     if (U3R < cal){U3 = 0;}

     if (U4R > cal){U4 = 1;}
     if (U4R < cal){U4 = 0;}

     if (U5R > cal){U5 = 1;}
     if (U5R < cal){U5 = 0;}
}

preracunaj (){                               //pretvara u brojku od -4 do 4 stanje na senzoru
    if(U1==1 && U2==1 && U3==1 && U4==1 && U5==1){mod(0);last=0;}          //pravo
    if(U1==0 && U2==0 && U3==1 && U4==0 && U5==0){mod(0);last=0;}
    if(U1==0 && U2==1 && U3==1 && U4==1 && U5==0){mod(0);last=0;}

    if(U1==1 && U2==0 && U3==0 && U4==0 && U5==0){mod(4);last=4;}          //4 desno

    if(U1==1 && U2==1 && U3==0 && U4==0 && U5==0){mod(4);last=4;}          //3 desno

    if(U1==0 && U2==1 && U3==0 && U4==0 && U5==0){mod(4);last=4;}          //2 desno
    if(U1==1 && U2==1 && U3==1 && U4==0 && U5==0){mod(4);last=4;}

    if(U1==0 && U2==1 && U3==1 && U4==0 && U5==0){mod(4);last=0;}
    if(U1==1 && U2==1 && U3==1 && U4==1 && U5==0){mod(4);last=0;}          //1 desno

    if(U1==0 && U2==0 && U3==0 && U4==0 && U5==1){mod(-4);last=-4;}          //4 levo

    if(U1==0 && U2==0 && U3==0 && U4==1 && U5==1){mod(-4);last=-4;}          //3 levo

    if(U1==0 && U2==0 && U3==0 && U4==1 && U5==0){mod(-4);last=-4;}          //2 levo
    if(U1==0 && U2==0 && U3==1 && U4==1 && U5==1){mod(-4);last=-4;}

    if(U1==0 && U2==0 && U3==1 && U4==1 && U5==0){mod(-4);last=-0;}          //1 levo
    if(U1==0 && U2==1 && U3==1 && U4==1 && U5==1){mod(-4);last=-0;}

    if(U1==0 && U2==0 && U3==0 && U4==0 && U5==0 && last==-4){mod(-4);}
    if(U1==0 && U2==0 && U3==0 && U4==0 && U5==0 && last==4){mod(4);}


}

void all0 () { LATE=0x00;LATD=0x00;}   //port e i d na nulu        Jeja <3

void VCNL_Set_default_Mode(){

  ByteToStr(VCNL_RdSingle(REGISTER_ID),temp_text);
  VCNL_WrSingle(REGISTER_PROX_CURRENT, 20);
  ByteToStr(VCNL_RdSingle(REGISTER_PROX_CURRENT),temp_text);
  VCNL_WrSingle(REGISTER_PROX_RATE, PROX_MEASUREMENT_RATE_31);
  ByteToStr(VCNL_RdSingle(REGISTER_PROX_RATE), temp_text);
  VCNL_WrSingle(REGISTER_COMMAND, COMMAND_PROX_ENABLE | COMMAND_AMBI_ENABLE | COMMAND_SELFTIMED_MODE_ENABLE);
  ByteToStr(VCNL_RdSingle(REGISTER_COMMAND), temp_text);
  VCNL_WrSingle(REGISTER_INTERRUPT_CONTROL, INTERRUPT_THRES_SEL_PROX | INTERRUPT_THRES_ENABLE | INTERRUPT_COUNT_EXCEED_1);
  ByteToStr(VCNL_RdSingle(REGISTER_INTERRUPT_CONTROL), temp_text);
  VCNL_WrSingle(REGISTER_AMBI_PARAMETER, AMBI_PARA_AVERAGE_32 | AMBI_PARA_AUTO_OFFSET_ENABLE | AMBI_PARA_MEAS_RATE_2);
  ByteToStr(VCNL_RdSingle(REGISTER_AMBI_PARAMETER), temp_text);
  }

void main() {


  cal= 300;  //dal je crno il je belo
  cnt1 = 0;
  cnt2 =   0;
  cnt3 = 0;

  ab=0;
   a1=100;
   a2=100;
   c1=100;
   c2=100;
   trept=0;

  ANSELA = 0x2F;
  TRISA = 0x2F;
  LATA = 0x00;

  ANSELB = 0;              // Configure AN pins as digital
  TRISB  = 0;              // PORTB is output
  LATB = 0x00;
  TRISB0_bit = 1;

  ANSELC = 0;              // Configure AN pins as digital
  TRISC  = 0;              // PORTB is output
  LATC = 0x00;           // Initialize PORTB
  tRISC0_BIT=1;

  ANSELD = 0;              // Configure AN pins as digital
  TRISD  = 0;              // PORTB is output
  LATD = 0x00;

  ANSELE = 0;              // Configure AN pins as digital
  TRISE  = 0;              // PORTB is output
  LATE = 0xFF;

  INTCON = 0xC0;                   //setovanje tajmeraaaaaaaaaaaaaaaaaaaaaaaaaaaa
  T0CON         = 0xC2;
  TMR0L         = 0;           // Set TMR0 to 8bit mode and prescaler to 256
  GIE_bit = 1;             // Enable global interrupt
  TMR0IE_bit = 1;          // Enable Timer0 interrupt

      /*LATB5_bit=1;
      LATB6_bit=1;
      Delay_ms(10);
        LATB5_bit=0;
      LATB6_bit=0;*/

   //UART1_Init(9600);               // Initialize UART module at 9600 bps
  //Delay_ms(100);

  //UART1_Write(13);
  //UART1_Write(10);
     // Init I2C

  I2C1_Init(100000);
  I2C1_Stop();
  // Set Default mode of operation for VCNL4000 chip
  VCNL_Set_default_Mode();

  // Measure average of proximity value
  // it will be used to set threshold value
  SummProxiValue = 0;
  for (i_loop = 0; i_loop < 16; i_loop++) {
    do { // wait on prox data ready bit
      Command = VCNL_RdSingle(REGISTER_COMMAND);
    } while (!(Command & COMMAND_MASK_PROX_DATA_READY)); // prox data ready ?
    VCNL_RdSeq(REGISTER_PROX_VALUE, &data_, 2);
    ProxiValue = (data_[0] << 8) | data_[1];
    SummProxiValue += ProxiValue; // Summ of all measured prox values
  }
  AverageProxiValue = SummProxiValue / 16; // calculate average

  LoByte = (unsigned char)((AverageProxiValue + 20) & 0x00FF);
  HiByte = (unsigned char)(((AverageProxiValue + 20) & 0xFF00) >> 8);
  VCNL_WrSingle(REGISTER_INTERRUPT_HIGH_THRES, HiByte);
  VCNL_WrSingle(REGISTER_INTERRUPT_HIGH_THRES + 1, LoByte);
  WordToStr(AverageProxiValue + 20, temp_text);
  LATB = 0x00;

  Delay_ms(50);
  LATD0_bit=0;
  LATD1_bit=0;
  LATD3_bit=0;
  LATD5_bit=0;

  while (1) {
     // LATD5_bit=1;
    //all0();
    ridd();
    preracunaj();
    
       //Delay_ms(10);
    //all0();


    if(ab==0){
              //pwm1(10,45);
             // pwm2(10,45);
              pwm1(c1,c2);
              pwm2(a1,a2);
             // preracunaj();
              }
    else{
        pwm1(2,80);
         pwm2(2,80);
         }

    do{
      Command = VCNL_RdSingle(REGISTER_COMMAND);
    }while (!(Command & (COMMAND_MASK_PROX_DATA_READY | COMMAND_MASK_AMBI_DATA_READY))); // data ready ?

    // read interrupt status register
    InterruptStatus = VCNL_RdSingle(REGISTER_INTERRUPT_STATUS);
    // check interrupt status for High Threshold
    if(InterruptStatus & INTERRUPT_MASK_STATUS_THRES_HI){
      VCNL_WrSingle(REGISTER_INTERRUPT_STATUS, InterruptStatus);
    }

    // prox value ready for using
    if(Command & COMMAND_MASK_PROX_DATA_READY){
      // read proximity value
      VCNL_RdSeq(REGISTER_PROX_VALUE, &data_, 2);
      ProxiValue = (data_[0] << 8) | data_[1];
      // display proximity value
      WordToStr(ProxiValue, temp_text);


      // check the range of the proximity
      if(ProxiValue < (AverageProxiValue + 50)){
                       LATB2_bit=1;
                      LATD2_bit=0;
      }             ab=0;
      if((ProxiValue > (AverageProxiValue + 50))) {
                       LATB2_bit=0;
                     LATD2_bit=1;

                     ab=1;
       }
     }
     if(cnt3>700&trept==0){LATB1_bit=1;cnt3=0;trept=trept+1;}
      if(cnt3>700&trept==1){LATB1_bit=0;cnt3=0;trept=trept+1;}
      if(trept==2){trept=0;}

      //all0();
   }
    // small delay inside main loop
    //delay_ms(30);

    //pwm1(100,100);       //levi
     // pwm2(15,60);       //levi


   //if(RC0_bit==1){ LATD=0xFF;pwm1(100,40);       //levi
      //pwm2(100,400);     }      //levi

      // else{LATD=0x00; pwm1(100,400);pwm2(100,40);      //levi
      //   }


      //   pwm1(100,0);    */

   /*if (cnt5 >= 1000) {
      LATD = ~PORTD;         // Toggle PORTB LEDs
      cnt5 = 0;                // Reset cnt
    }   */
    //LATC = adc_rd;
    //LATD = Hi(adc_rd);

    //uart_rd = UART1_Read();     // read the received data,
    // UART1_Write(U5R);       // and send data via UART
    // UART1_Write(hi(U5R));


  }